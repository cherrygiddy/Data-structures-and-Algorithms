public class AvlTree{
      private class AvlNode{
      private int height;
      private int value;
      private AvlNode leftchild;
      private AvlNode rightchild;
      private AvlNode(int value) {
          this.value=value;
      }
      }

    private AvlNode root;

  1.  public void insert(int value){

        root= insert(root);
    }
       private AvlNode insert(AvlNode root,int value){

       if(root==null){
          return new AvlNode(value);
         }
         var current=root;
       if(value<current.value)
       root.leftchild=insert(current.leftchild,value);
       else if(value>root.value)
       root.righchild=insert(current.righchild,value);
       setHeight(root);
       var balancefactor=height(root.leftchild)-height(root.righchild);
       return balance(root);
  }
  2.private AVLNode balance(AVLNode root) {
   if (isLeftHeavy(root)) {
     if (balanceFactor(root.leftChild) < 0)
       root.leftChild = rotateLeft(root.leftChild);
     return rotateRight(root);
   }
   else if (isRightHeavy(root)) {
     if (balanceFactor(root.rightChild) > 0)
       root.rightChild = rotateRight(root.rightChild);
     return rotateLeft(root);
   }
   return root;
 }

 3.private AVLNode rotateLeft(AVLNode root) {
   var newRoot = root.rightChild;

   root.rightChild = newRoot.leftChild;
   newRoot.leftChild = root;

   setHeight(root);
   setHeight(newRoot);

   return newRoot;
 }

 4.private AVLNode rotateRight(AVLNode root) {
   var newRoot = root.leftChild;

   root.leftChild = newRoot.rightChild;
   newRoot.rightChild = root;

   setHeight(root);
   setHeight(newRoot);

   return newRoot;
 }

 5.private void setHeight(AVLNode node) {
   node.height = Math.max(
           height(node.leftChild),
           height(node.rightChild)) + 1;
 }

 6.private boolean isLeftHeavy(AVLNode node) {
   return balanceFactor(node) > 1;
 }

 7.private boolean isRightHeavy(AVLNode node) {
   return balanceFactor(node) < -1;
 }

 8.private int balanceFactor(AVLNode node) {
   return (node == null) ? 0 : height(node.leftChild) - height(node.rightChild);
 }

 9.private int height(AVLNode node) {
   return (node == null) ? -1 : node.height;
 }
}
